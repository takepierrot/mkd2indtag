/*	Renban(Auto Nubering) for InDesign CS4+	Author: Yuichiro Ohtsu(Libroworks inc.)	Home:http://www.libroworks.co.jp/	*///段落→文字→クラス→表の順番は変えないようにvar g_outputstyles = [	//段落スタイル	{styletype: 'para', tagname: 'h1', stylename: ''},	{styletype: 'para', tagname: 'h2', stylename: ''},	{styletype: 'para', tagname: 'h3', stylename: ''},	{styletype: 'para', tagname: 'h4', stylename: ''},	{styletype: 'para', tagname: 'h5', stylename: ''},	{styletype: 'para', tagname: 'h6', stylename: ''},	{styletype: 'para', tagname: 'ul_li', stylename: ''},	{styletype: 'para', tagname: 'ol_li', stylename: ''},	{styletype: 'para', tagname: 'pre', stylename: ''},	{styletype: 'para', tagname: 'p', stylename: ''},	{styletype: 'para', tagname: 'blockquote', stylename: ''},	//文字スタイル	{styletype: 'chara', tagname: 'strong', stylename: ''},	{styletype: 'chara', tagname: 'em', stylename: ''},	{styletype: 'chara', tagname: 'del', stylename: ''},	{styletype: 'chara', tagname: 'code', stylename: ''},	{styletype: 'chara', tagname: 'img', stylename: ''},	//段落スタイル（クラスまたは属性）	{styletype: 'class', tagname: 'div_hen', stylename: ''},	{styletype: 'class', tagname: 'div_zuchuu', stylename: ''},	{styletype: 'class', tagname: 'div_column', stylename: ''},	{styletype: 'class', tagname: 'div_sidenote', stylename: ''},	{styletype: 'class', tagname: 'img_alt', stylename: ''},	{styletype: 'class', tagname: 'img_src', stylename: ''},	//表	{styletype: 'table', tagname: 'table', stylename: ''},	{styletype: 'table', tagname: 'codetable', stylename: ''},	{styletype: 'table', tagname: 'codetable_notitle', stylename: ''}];//コード塗り分けvar g_swatches = [	{styletype: 'swatch', tagname: 'comment', stylename: ''},	{styletype: 'swatch', tagname: 'template_comment', stylename: ''},	{styletype: 'swatch', tagname: 'header', stylename: ''},	{styletype: 'swatch', tagname: 'javadoc', stylename: ''},	{styletype: 'swatch', tagname: 'keyword', stylename: ''},	{styletype: 'swatch', tagname: 'title', stylename: ''},	{styletype: 'swatch', tagname: 'subst', stylename: ''},	{styletype: 'swatch', tagname: 'request', stylename: ''},	{styletype: 'swatch', tagname: 'status', stylename: ''},	{styletype: 'swatch', tagname: 'number', stylename: ''},	{styletype: 'swatch', tagname: 'hexcolor', stylename: ''},	{styletype: 'swatch', tagname: 'constant', stylename: ''},	{styletype: 'swatch', tagname: 'string', stylename: ''},	{styletype: 'swatch', tagname: 'tag', stylename: ''},	{styletype: 'swatch', tagname: 'value', stylename: ''},	{styletype: 'swatch', tagname: 'phpdoc', stylename: ''},	{styletype: 'swatch', tagname: 'formula', stylename: ''},	{styletype: 'swatch', tagname: 'id', stylename: ''},	{styletype: 'swatch', tagname: 'type', stylename: ''},	{styletype: 'swatch', tagname: 'literal', stylename: ''},	{styletype: 'swatch', tagname: 'command', stylename: ''},	{styletype: 'swatch', tagname: 'property', stylename: ''},	{styletype: 'swatch', tagname: 'attribute', stylename: ''},	{styletype: 'swatch', tagname: 'body', stylename: ''},	{styletype: 'swatch', tagname: 'regexp', stylename: ''},	{styletype: 'swatch', tagname: 'class', stylename: ''},	{styletype: 'swatch', tagname: 'symbol', stylename: ''},	{styletype: 'swatch', tagname: 'special', stylename: ''},	{styletype: 'swatch', tagname: 'built_in', stylename: ''},	{styletype: 'swatch', tagname: 'preprocessor', stylename: ''},	{styletype: 'swatch', tagname: 'doctype', stylename: ''},	{styletype: 'swatch', tagname: 'cdata', stylename: ''},	{styletype: 'swatch', tagname: 'change', stylename: ''},	{styletype: 'swatch', tagname: 'function', stylename: ''},	{styletype: 'swatch', tagname: 'prompt', stylename: ''},	{styletype: 'swatch', tagname: 'variable', stylename: ''},];main();function main(){	//Make certain that user interaction (display of dialogs, etc.) is turned on.	//app.scriptPreferences.userInteractionLevel = UserInteractionLevels.interactWithAll;	if (app.documents.length != 0){		//ダイアログ表示		myDisplayDialog();	} else { 	   alert ("ドキュメントを開いてください");	}}function myDisplayDialog(){	//文字スタイルの一覧を取得	var myDocument = app.activeDocument;	var charastyles = [];	for(var i=0; i<myDocument.characterStyles.length; i++){		charastyles.push(myDocument.characterStyles.item(i).name);	}	var parastyles = [];	for(var i=0; i<myDocument.paragraphStyles.length; i++){		parastyles.push(myDocument.paragraphStyles.item(i).name);	}	// var swatches = [];	// for(var i=0; i<myDocument.swatches.length; i++){	// 	swatches.push(myDocument.swatches.item(i).name);	// }	var tablestyles = [];	for(var i=0; i<myDocument.tableStyles.length; i++){		tablestyles.push(myDocument.tableStyles.item(i).name);	}			//ダイアログ生成	var myDialog = app.dialogs.add({name:"ExportTagStyle"});	var listboxes = [];	//パネルを追加	var i;	with(myDialog.dialogColumns.add()){		//説明ラベル		// staticTexts.add({staticLabel:"HTMLタグと対応させるスタイル／スウォッチ名を選択してください"});		// staticTexts.add({staticLabel:"スタイル名の先頭にタグ名を入れる（h1節タイトルなど）と自動選択されます"});		for(i = 0; i<g_outputstyles.length; i++){			if(g_outputstyles[i].styletype == 'para'){				with(borderPanels.add()){					staticTexts.add({staticLabel:g_outputstyles[i].tagname});					with(dialogColumns.add()){						listboxes.push(							dropdowns.add({stringList: parastyles})						);												}				}			} else {				break;			}		}	}	//パネルを追加	with(myDialog.dialogColumns.add()){		for(; i<g_outputstyles.length; i++){			if(g_outputstyles[i].styletype == 'chara'){				with(borderPanels.add()){					staticTexts.add({staticLabel:g_outputstyles[i].tagname});					with(dialogColumns.add()){						listboxes.push(							dropdowns.add({stringList: charastyles})						);					}				}			} else {				break;			}		}	}	//パネルを追加	with(myDialog.dialogColumns.add()){		for(; i<g_outputstyles.length; i++){			if(g_outputstyles[i].styletype == 'class'){				with(borderPanels.add()){					staticTexts.add({staticLabel:g_outputstyles[i].tagname});					with(dialogColumns.add()){						listboxes.push(							dropdowns.add({stringList: parastyles})						);					}				}			} else {				break;			}		}	}	//パネルを追加	with(myDialog.dialogColumns.add()){		for(; i<g_outputstyles.length; i++){			if(g_outputstyles[i].styletype == 'table'){				with(borderPanels.add()){					staticTexts.add({staticLabel:g_outputstyles[i].tagname});					with(dialogColumns.add()){						listboxes.push(							dropdowns.add({stringList: tablestyles})						);					}				}			} else {				break;			}		}	}	//自動設定（スタイル名の先頭にタグ名が含まれていれば自動選択）	for(var i=0; i<g_outputstyles.length; i++){		if(g_outputstyles[i].styletype == 'para' || g_outputstyles[i].styletype == 'class'){			for(var j=0; j<parastyles.length; j++){				if(parastyles[j].indexOf(g_outputstyles[i].tagname) == 0) {					listboxes[i].selectedIndex = j;					break;				}			}		} else if(g_outputstyles[i].styletype == 'chara'){			for(var j=0; j<charastyles.length; j++){				if(charastyles[j].indexOf(g_outputstyles[i].tagname) == 0) {					listboxes[i].selectedIndex = j;					break;				}			}		} else if(g_outputstyles[i].styletype == 'table'){			for(var j=0; j<tablestyles.length; j++){				if(tablestyles[j].indexOf(g_outputstyles[i].tagname) == 0) {					listboxes[i].selectedIndex = j;					break;				}			}		}	}		myReturn = myDialog.show();	if (myReturn == true){		exportTagFile(listboxes);		myDialog.destroy();		return true;	} else {		myDialog.destroy();		return false;	}		}function exportTagFile(listboxes){	var myTextFile = File.saveDialog("YAMLファイルを保存", undefined);	if(myTextFile != null){		//Open the file with write access.		myTextFile.open("w");		myTextFile.writeln('paraStyle:');		for(var i = 0; i<g_outputstyles.length; i++){			if(g_outputstyles[i].styletype == 'para'){				if(listboxes[i].selectedIndex > -1){					myTextFile.writeln(' - tagname: ' + g_outputstyles[i].tagname);					myTextFile.writeln('   stylename: ' + listboxes[i].stringList[listboxes[i].selectedIndex]);								}			} else {				break;			}		}		myTextFile.writeln('charaStyle:');		for(; i<g_outputstyles.length; i++){			if(g_outputstyles[i].styletype == 'chara'){				if(listboxes[i].selectedIndex > -1){					myTextFile.writeln(' - tagname: ' + g_outputstyles[i].tagname);					myTextFile.writeln('   stylename: ' + listboxes[i].stringList[listboxes[i].selectedIndex]);								}			} else {				break;			}		}		myTextFile.writeln('classStyle:');		for(; i<g_outputstyles.length; i++){			if(g_outputstyles[i].styletype == 'class'){				if(listboxes[i].selectedIndex > -1){					myTextFile.writeln(' - tagname: ' + g_outputstyles[i].tagname);					myTextFile.writeln('   stylename: ' + listboxes[i].stringList[listboxes[i].selectedIndex]);								}			} else {				break;			}		}		myTextFile.writeln('tableStyle:');		for(; i<g_outputstyles.length; i++){			if(g_outputstyles[i].styletype == 'table'){				if(listboxes[i].selectedIndex > -1){					myTextFile.writeln(' - tagname: ' + g_outputstyles[i].tagname);					myTextFile.writeln('   stylename: ' + listboxes[i].stringList[listboxes[i].selectedIndex]);								}			} else {				break;			}		}			myTextFile.writeln('codeSwatch:');		for(var i=0; i<g_swatches.length; i++){			myTextFile.writeln(' - ' + g_swatches[i].tagname);			}		myTextFile.close();		alert("出力完了");	}	return 0;}